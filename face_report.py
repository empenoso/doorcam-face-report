# face_report.py

# ü§ñüîé –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ü§ñüîé
#
# –≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π Python-—Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–µ–∫—Ç–∞, –µ–≥–æ "–º–æ–∑–≥". –û–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏ —Å –∫–∞–º–µ—Ä,
# –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–∏—Ö –ª–∏—Ü–∞ –ª—é–¥–µ–π, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π
# –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫ —á–∞—Å—Ç–æ –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ—è–≤–ª—è–ª—Å—è. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç
# –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –≤ –≤–∏–¥–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ HTML-—Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π.
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - –ü—Ä–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: –ø–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ, –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ (CNN/HOG) –∏ –¥—Ä.
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ (.mp4) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –∫–∞–¥—Ä–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
# - –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –Ω–∞ –∫–∞–¥—Ä–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—ã—Å—Ç—Ä–æ–π HOG –∏–ª–∏ —Ç–æ—á–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π CNN-–º–æ–¥–µ–ª–∏
# - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π "—Ü–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫" (face encoding)
# - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ "–æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤" –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–π
# - "–£–º–Ω—ã–π" –ø–æ–¥—Å—á–µ—Ç: –∫–∞–∂–¥–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –æ–¥–∏–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª
# - –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫-–ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ HTML-–æ—Ç—á–µ—Ç–∞ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏–π
#
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç setup_env.sh,
# –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ, –≤–∫–ª—é—á–∞—è dlib —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA.
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 19.08.2025
# –í–µ—Ä—Å–∏—è: 1.0
#
# –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/doorcam-face-report/
#

import argparse
import base64
import cv2
import face_recognition
import numpy as np
from pathlib import Path
from tqdm import tqdm
import sys
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---
FACE_COMPARISON_TOLERANCE = 0.6
THUMBNAIL_SIZE = (150, 150)

def create_thumbnail(frame, location):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ª–∏—Ü–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏.
    """
    top, right, bottom, left = location
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø—ã —Å 25% –¥–æ 50% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ª–∏—Ü–∞.
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞ (–≤–æ–ª–æ—Å—ã, –ª–æ–±, –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫).
    pad_y = (bottom - top) // 2 
    pad_x = (right - left) // 2

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã, –Ω–æ —Å–ª–µ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–¥—Ä–∞
    top = max(0, top - pad_y)
    bottom = min(frame.shape[0], bottom + pad_y)
    left = max(0, left - pad_x)
    right = min(frame.shape[1], right + pad_x)
    
    face_image = frame[top:bottom, left:right]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç—ã–º
    if face_image.size == 0:
        return None

    resized_face = cv2.resize(face_image, THUMBNAIL_SIZE)
    is_success, buffer = cv2.imencode(".jpg", resized_face)
    
    if not is_success:
        return None
        
    return base64.b64encode(buffer).decode("utf-8")

def generate_html_report(face_metadata, output_path):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏—Ü.
    """
    if not face_metadata:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_metadata = sorted(face_metadata, key=lambda x: x['count'], reverse=True)

    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º {total_count}
    # –∏ {person_cards}. CSS-—Å—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    html_template = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –ª–∏—Ü</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f9; }}
            h1 {{ text-align: center; color: #333; }}
            h2 {{ text-align: center; color: #666; font-weight: normal; margin-top: -10px; }}
            .container {{ display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }}
            .person-card {{
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                text-align: center;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                transition: transform 0.2s;
                width: 200px;
            }}
            .person-card:hover {{ transform: translateY(-5px); }}
            .person-card img {{ border-radius: 8px; width: 150px; height: 150px; object-fit: cover; border: 3px solid #eee; }}
            .person-card h3 {{ margin: 10px 0 5px 0; color: #555; }}
            .person-card p {{ margin: 0; color: #777; }}
            .person-card .count {{ font-size: 1.2em; font-weight: bold; color: #333; }}
        </style>
    </head>
    <body>
        <h1>–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –ª–∏—Ü</h1>
        <h2>–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π: {total_count}</h2>
        <div class="container">
            {person_cards}
        </div>
    </body>
    </html>
    """

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
    cards_html = []
    for i, data in enumerate(sorted_metadata):
        person_id = f"–õ–∏—á–Ω–æ—Å—Ç—å #{i + 1}"
        count_text = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ {data['count']} —Ñ–∞–π–ª–∞—Ö"
        thumbnail_b64 = data['thumbnail']
        cards_html.append(f"""
            <div class="person-card">
                <img src="data:image/jpeg;base64,{thumbnail_b64}" alt="{person_id}">
                <h3>{person_id}</h3>
                <p class="count">{count_text}</p>
            </div>
        """)

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π HTML, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    final_html = html_template.format(
        total_count=len(sorted_metadata),
        person_cards="\n".join(cards_html)
    )

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(final_html)
    print(f"\n–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

def main():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏—Ü.")
    parser.add_argument("--input-dir", required=True, help="–ö–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–∞–ø–∫–∞–º–∏ –∫–∞–º–µ—Ä.")
    parser.add_argument("--output-html", default="face_report.html", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML-–æ—Ç—á–µ—Ç–∞.")
    parser.add_argument("--model", default="hog", choices=["hog", "cnn"], help="–ú–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü: 'hog' (–±—ã—Å—Ç—Ä–∞—è, CPU) –∏–ª–∏ 'cnn' (—Ç–æ—á–Ω–∞—è, GPU).")
    parser.add_argument("--scale", type=float, default=0.5, help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–¥—Ä–∞ –ø–µ—Ä–µ–¥ –¥–µ—Ç–µ–∫—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤ 2 —Ä–∞–∑–∞, 1.0 –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞).")
    parser.add_argument("--skip-frames", type=int, default=25, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∫–∞–¥—Ä–æ–≤ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏.")
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–¥—Ä—ã, –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏—Ü–∞.")

    args = parser.parse_args()

    input_path = Path(args.input_dir)
    if not input_path.is_dir():
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.input_dir}")
        sys.exit(1)

    print("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ .mp4...")
    video_files = sorted(list(input_path.rglob("*.mp4"))) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    if not video_files:
        print(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ .mp4")
        sys.exit(0)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–æ–¥–µ–ª—å={args.model}, –º–∞—Å—à—Ç–∞–±={args.scale}, –ø—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤={args.skip_frames}")

    if args.debug:
        debug_dir = Path("debug_frames")
        debug_dir.mkdir(exist_ok=True)
        print(f"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω. –ö–∞–¥—Ä—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–∞–ø–∫—É: {debug_dir}")

    known_face_encodings = []
    known_face_metadata = [] 

    for video_path in tqdm(video_files, desc="–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", unit="–≤–∏–¥–µ–æ"):
        cap = cv2.VideoCapture(str(video_path))
        if not cap.isOpened():
            tqdm.write(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path.name}")
            continue

        # –≠—Ç–æ—Ç set –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –ª–∏—á–Ω–æ—Å—Ç–µ–π, —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
        # –û–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ.
        persons_found_in_this_file = set()

        frame_count = 0
        processed_one_frame_for_debug = False
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            
            frame_count += 1
            if frame_count % args.skip_frames != 0:
                continue

            if args.scale != 1.0:
                small_frame = cv2.resize(frame, (0, 0), fx=args.scale, fy=args.scale)
            else:
                small_frame = frame
            
            rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
            face_locations = face_recognition.face_locations(rgb_small_frame, model=args.model)
            
            if args.debug and not processed_one_frame_for_debug and face_locations:
                debug_frame = frame.copy()
                tqdm.write(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ {len(face_locations)} –ª–∏—Ü –≤ {video_path.name}")
                for (top, right, bottom, left) in face_locations:
                    top, right, bottom, left = int(top/args.scale), int(right/args.scale), int(bottom/args.scale), int(left/args.scale)
                    cv2.rectangle(debug_frame, (left, top), (right, bottom), (0, 255, 0), 2)
                debug_filename = debug_dir / f"found_{video_path.stem}_{frame_count}.jpg"
                cv2.imwrite(str(debug_filename), debug_frame)
                processed_one_frame_for_debug = True

            if face_locations:
                current_face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations, num_jitters=1)
                
                scale_inv = 1.0 / args.scale
                for i, face_encoding in enumerate(current_face_encodings):
                    matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=FACE_COMPARISON_TOLERANCE)
                    
                    match_index = -1
                    if True in matches:
                        match_index = matches.index(True)
                    
                    # –ï—Å–ª–∏ –ª–∏—á–Ω–æ—Å—Ç—å —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
                    if match_index != -1:
                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ —Ñ–∞–π–ª–∞–º ---
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤–∏–¥–∏–º —ç—Ç—É –ª–∏—á–Ω–æ—Å—Ç—å –í –≠–¢–û–ú –§–ê–ô–õ–ï –≤–ø–µ—Ä–≤—ã–µ.
                        if match_index not in persons_found_in_this_file:
                            known_face_metadata[match_index]['count'] += 1
                            persons_found_in_this_file.add(match_index)
                            tqdm.write(f"–õ–∏—á–Ω–æ—Å—Ç—å #{match_index + 1} –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: {video_path.name}")

                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å
                    else:
                        tqdm.write(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ {video_path.name}")
                        known_face_encodings.append(face_encoding)
                        
                        (top, right, bottom, left) = face_locations[i]
                        original_location = (int(top*scale_inv), int(right*scale_inv), int(bottom*scale_inv), int(left*scale_inv))

                        thumbnail = create_thumbnail(frame, original_location)
                        if thumbnail:
                            known_face_metadata.append({
                                "count": 1,
                                "thumbnail": thumbnail
                            })
                            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ —Ñ–∞–π–ª–∞–º ---
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å –≤ set –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –µ–µ –¥–≤–∞–∂–¥—ã.
                            new_person_index = len(known_face_metadata) - 1
                            persons_found_in_this_file.add(new_person_index)
        cap.release()

    generate_html_report(known_face_metadata, args.output_html)

if __name__ == "__main__":
    main()